// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var Class, Events, fs, _Sys, _extend;
    (function() {
      var keyStack, q;
      keyStack = [];
      q = {
        "0": "\\",
        8: "backspace",
        9: "tab",
        12: "num",
        13: "enter",
        16: "shift",
        17: "ctrl",
        18: "alt",
        19: "pause",
        20: "caps",
        27: "esc",
        32: "space",
        33: "pageup",
        34: "pagedown",
        35: "end",
        36: "home",
        37: "left",
        38: "up",
        39: "right",
        40: "down",
        44: "print",
        45: "insert",
        46: "delete",
        48: "0",
        49: "1",
        50: "2",
        51: "3",
        52: "4",
        53: "5",
        54: "6",
        55: "7",
        56: "8",
        57: "9",
        65: "a",
        66: "b",
        67: "c",
        68: "d",
        69: "e",
        70: "f",
        71: "g",
        72: "h",
        73: "i",
        74: "j",
        75: "k",
        76: "l",
        77: "m",
        78: "n",
        79: "o",
        80: "p",
        81: "q",
        82: "r",
        83: "s",
        84: "t",
        85: "u",
        86: "v",
        87: "w",
        88: "x",
        89: "y",
        90: "z",
        91: "cmd",
        92: "cmd",
        93: "cmd",
        96: "num_0",
        97: "num_1",
        98: "num_2",
        99: "num_3",
        100: "num_4",
        101: "num_5",
        102: "num_6",
        103: "num_7",
        104: "num_8",
        105: "num_9",
        106: "num_multiply",
        107: "num_add",
        108: "num_enter",
        109: "num_subtract",
        110: "num_decimal",
        111: "num_divide",
        124: "print",
        144: "num",
        145: "scroll",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
        223: "`",
        224: "cmd",
        225: "alt",
        57392: "ctrl",
        63289: "num"
      };
      window.KeyBoardMaps = {
        _callbacks: {},
        _combes: {},
        register: function(combe, callback, ctx) {
          if (ctx == null) {
            ctx = this;
          }
          callback._listenerSequence = callback._listenerSequence || (new Date().getTime() + Math.random() + "");
          combe = this._combes[combe] = this._combes[combe] || [];
          this._callbacks[callback._listenerSequence] = {
            callback: callback,
            ctx: ctx
          };
          combe.push(callback._listenerSequence);
          return this;
        },
        get: function(combe) {
          var self;
          self = this;
          if (this._combes[combe]) {
            return this._combes[combe].map(function(sequence) {
              return self._callbacks[sequence];
            });
          }
        },
        remove: function(combe, callback, ctx) {
          var combearr, sequence;
          if (ctx == null) {
            ctx = this;
          }
          sequence = callback._listenerSequence;
          combearr = this._combes[combe] = this._combes[combe] || [];
          return this._combes[combe] = combearr.slice(0, combearr.indexOf(sequence)).concat(combearr.slice(combearr.indexOf(sequence) + 1));
        }
      };
      $(document).on("keydown", function(e) {
        var cbs, evt, key, triggerString, _i, _j, _len, _len1;
        while (keyStack.indexOf(e.keyCode) >= 0) {
          keyStack = keyStack.slice(0, keyStack.indexOf(e.keyCode)).concat(keyStack.slice(keyStack.indexOf(e.keyCode) + 1));
        }
        keyStack.push(e.keyCode);
        triggerString = '';
        for (_i = 0, _len = keyStack.length; _i < _len; _i++) {
          key = keyStack[_i];
          triggerString += q[key] + "+";
        }
        triggerString = triggerString.substr(0, triggerString.length - 1);
        if ((cbs = KeyBoardMaps.get(triggerString))) {
          for (_j = 0, _len1 = cbs.length; _j < _len1; _j++) {
            evt = cbs[_j];
            setTimeout(function() {
              return evt.callback.apply(evt.ctx, e);
            }, 1);
          }
          return false;
        } else {
          return true;
        }
      });
      return $(document).on("keyup", function(e) {
        keyStack = [];
        return false;
      });
    })();
    $(document).ajaxError(function(event, request, settings) {
      return $(document).trigger("ajaxerror", [event, request, settings]);
    });
    _extend = function(child, parent, props, staticProps) {
      var key, value, _ref, _ref1, _ref2;
      if (props == null) {
        props = {};
      }
      if (staticProps == null) {
        staticProps = {};
      }
      child.prototype = Object.create(parent.prototype);
      _ref = Object.create(props);
      for (key in _ref) {
        value = _ref[key];
        child.prototype[key] = value;
      }
      _ref1 = Object.create(parent);
      for (key in _ref1) {
        value = _ref1[key];
        child[key] = value;
      }
      _ref2 = Object.create(staticProps);
      for (key in _ref2) {
        value = _ref2[key];
        child[key] = value;
      }
      child.prototype._super = parent.prototype;
      return child;
    };
    Class = function() {
      this.constructor(arguments);
      return this;
    };
    Class.prototype.constructor = function() {
      return this.initialize.apply(this, arguments);
    };
    Class.prototype.initialize = function() {};
    Class.extend = function(props, staticProps) {
      var self, _Class;
      if (props == null) {
        props = {};
      }
      if (staticProps == null) {
        staticProps = {};
      }
      self = this;
      _Class = function() {
        return self.prototype.constructor.apply(this, arguments);
      };
      _Class = _extend(_Class, this, props, staticProps);
      _Class.extend = function() {
        return self.extend.apply(this, arguments);
      };
      return _Class;
    };
    Events = window.Events = function() {
      return this.constructor(arguments);
    };
    Events = _extend(Events, Class, {
      on: function(signal, callback, ctx, evts) {
        var _listenerSequence;
        if (ctx == null) {
          ctx = this;
        }
        if (evts == null) {
          evts = (this._events[signal] = this._events[signal] || {});
        }
        if (!callback) {
          return;
        }
        _listenerSequence = callback._listenerSequence = callback._listenerSequence || (new Date().getTime() + Math.random());
        return evts[_listenerSequence] = {
          callback: callback,
          ctx: ctx
        };
      },
      unon: function(signal, callback) {
        if (this._events[signal] && this._events[signal][callback._listenerSequence]) {
          delete this._events[signal][callback._listenerSequence];
        }
        if (this._onceevents[signal] && this._onceevents[signal][callback._listenerSequence]) {
          return delete this._onceevents[signal][callback._listenerSequence];
        }
      },
      once: function(signal, callback, ctx, evts) {
        var _listenerSequence;
        if (ctx == null) {
          ctx = this;
        }
        if (evts == null) {
          evts = (this._onceevents[signal] = this._onceevents[signal] || {});
        }
        if (!callback) {
          return;
        }
        _listenerSequence = callback._listenerSequence = callback._listenerSequence || (new Date().getTime() + Math.random());
        return evts[_listenerSequence] = {
          callback: callback,
          ctx: ctx
        };
      },
      trigger: function(signal, args) {
        var evt, evtSeq, evts, _fn, _results;
        if (args == null) {
          args = [];
        }
        if (evts = this._onceevents[signal]) {
          _fn = function() {
            delete evts[evtSeq];
            return setTimeout((function() {
              if (evt && evt.callback) {
                return evt.callback.apply(evt.ctx, args);
              }
            }), 1);
          };
          for (evtSeq in evts) {
            evt = evts[evtSeq];
            _fn();
          }
        }
        if (evts = this._events[signal]) {
          _results = [];
          for (evtSeq in evts) {
            evt = evts[evtSeq];
            _results.push(setTimeout((function() {
              if (evt && evt.callback) {
                return evt.callback.apply(evt.ctx, args);
              }
            }), 1));
          }
          return _results;
        }
      }
    });
    Events.prototype.constructor = function() {
      this._events = {};
      this._onceevents = {};
      this.initialize.apply(this, arguments);
      return this;
    };
    _Sys = Events.extend({
      initialize: function() {}
    });
    window.Sysweb = window.Sysweb || (function() {
      return new _Sys();
    })();
    fs = Sysweb.fs = (function() {
      var newfs, resultHandler, _Fs;
      resultHandler = function(result) {
        if (result.error) {
          return newfs.trigger("fserror", arguments);
        }
      };
      _Fs = _Sys.extend({
        cd: function(path) {
          return $.get("/fs/cd", {
            path: path
          }).done(resultHandler);
        },
        ls: function(path) {
          return $.get("/fs/ls", {
            path: path
          }).done(resultHandler);
        },
        pwd: function() {},
        isDir: function(path) {
          return $.get("/fs/isDir", {
            path: path
          }).done(resultHandler);
        },
        isFile: function(path) {
          return $.get("/fs/isFile", {
            path: path
          }).done(resultHandler);
        },
        touch: function(path) {
          return $.post("/fs/touch", {
            path: path
          }).done(resultHandler);
        },
        mkdir: function(path) {
          return $.post("/fs/mkdir", {
            path: path
          }).done(resultHandler);
        },
        rm: function(path) {
          return $.post("/fs/rm", {
            path: path
          }).done(resultHandler);
        },
        cp: function(source, dest) {
          return $.post("/fs/cp", {
            source: source,
            dest: dest
          }).done(resultHandler);
        },
        mv: function(source, dest) {
          return $.post("/fs/mv", {
            source: source,
            dest: dest
          }).done(resultHandler);
        },
        head: function(path, start, stop) {
          return $.post("/fs/head", {
            path: path,
            start: start,
            stop: stop
          }).done(resultHandler);
        },
        tail: function(path, start, stop) {
          return $.post("/fs/tail", {
            path: path,
            start: start,
            stop: stop
          }).done(resultHandler);
        },
        stat: function(path) {
          return $.get("/fs/stat", {
            path: path
          }).done(resultHandler);
        },
        read: function(path) {
          return $.post("/fs/read", {
            path: path
          }).done(resultHandler);
        },
        write: function(path, text) {
          return $.post("/fs/write", {
            path: path,
            text: text
          }).done(resultHandler);
        },
        append: function(path, text) {
          return $.post("/fs/append", {
            path: path,
            text: text
          }).done(resultHandler);
        },
        echo: function(path, text) {
          return $.post("/fs/echo", {
            path: path,
            text: text
          }).done(resultHandler);
        },
        head: function(path) {
          return $.get("/fs/head", {
            path: path
          }).done(resultHandler);
        }
      });
      newfs = new _Fs();
      return newfs;
    })();
    Sysweb.Memory = (function() {
      var _Memory;
      _Memory = _Sys.extend({});
      return new _Memory();
    })();
    Sysweb.Library = (function() {
      var _Library;
      _Library = _Sys.extend({
        initialize: function() {
          return this._libs = {};
        },
        addLib: function(name, lib) {
          if (!this._libs[name]) {
            this._libs[name] = lib;
          }
          return this;
        },
        getLib: function(name) {
          return this._libs[name];
        },
        removeLib: function(name) {
          delete this._libs[name];
          return this;
        }
      });
      return new _Library();
    })();
    window.Sysweb.Environment = (function() {
      var _Environment;
      _Environment = _Sys.extend({
        initialize: function() {
          return this._envs = {};
        },
        set: function(name, value) {
          return this._envs[name] = value;
        },
        get: function(name) {
          return this._envs[name];
        },
        addBoot: function(tag, path, attr, attrs) {
          if (attrs == null) {
            attrs = '';
          }
          return $.post("/boot", {
            tag: tag,
            path: path,
            attr: attr,
            attrs: attrs
          });
        }
      });
      return new _Environment();
    })();
    window.Sysweb.Applications = (function() {
      var _Apps;
      _Apps = _Sys.extend({
        AppClass: Events.extend({}),
        initialize: function() {
          return this._apps = {};
        },
        set: function(name, value) {
          if (this._apps[name]) {
            return false;
          }
          return this._apps[name] = value;
        },
        get: function(name) {
          return this._apps[name];
        }
      });
      return new _Apps();
    })();
    return window.Sysweb.User = (function() {
      var _User;
      _User = _Sys.extend({
        initialize: function() {
          var self;
          self = this;
          this.fetch();
          return $(document).on("ajaxerror", function(docevent, event, request, settings) {
            if (request.status === 403) {
              return self.trigger("forbidden", [event, request, settings]);
            }
          });
        },
        login: function(params) {
          var self;
          if (params == null) {
            params = {};
          }
          " @parems email password ";
          self = this;
          return $.post("/login", params).done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              self.trigger("logined");
              return window.location.reload();
            } else {
              return self.trigger("loginfailed");
            }
          });
        },
        register: function(params) {
          var self;
          if (params == null) {
            params = {};
          }
          " @parems email password ";
          self = this;
          return $.post("/register", params).done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              return self.trigger("logined");
            } else {
              return self.trigger("registerfailed");
            }
          });
        },
        fetch: function() {
          var self;
          self = this;
          return $.post("/user/current").done(function(result) {
            if (!result.error && result.user) {
              self.currentUser = result.user;
              return self.trigger("logined");
            }
          });
        }
      });
      return new _User();
    })();
  });

}).call(this);
